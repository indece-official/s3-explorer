openapi: 3.0.1
info:
  title: S3 Explorer web api
  description: Rest-API for web ui of github.com/indece-official/s3-explorer
  version: "1.0"
servers:
- url: http://localhost:41100/api/
paths:
  /v1/profile:
    get:
      tags:
      - profile
      summary: Get all profiles
      operationId: v1GetProfiles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProfilesJSONResponseBody'
        400:
          description: Bad request
          content: {}
    post:
      tags:
      - profile
      summary: Add a new profile
      operationId: v1AddProfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - access_key
              - secret_key
              - region
              - endpoint
              - ssl
              - path_style
              - buckets
              properties:
                name:
                  type: string
                  example: 'Test-Profile 1'
                access_key:
                  type: string
                  example: '****'
                secret_key:
                  type: string
                  example: '****'
                region:
                  type: string
                  example: 'us-east-2'
                endpoint:
                  type: string
                  example: 'localhost:9021'
                ssl:
                  type: boolean
                path_style:
                  type: boolean
                buckets:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1AddProfileJSONResponseBody'
        400:
          description: Bad request
          content: {}

  /v1/profile/{profileID}:
    put:
      tags:
      - profile
      summary: Update an existing profile
      operationId: v1UpdateProfile
      parameters:
      - name: profileID
        in: path
        description: ID of profile
        required: true
        example: 10
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - region
              - endpoint
              - ssl
              - path_style
              - buckets
              properties:
                name:
                  type: string
                  example: 'Test-Profile 1'
                access_key:
                  type: string
                  example: '****'
                secret_key:
                  type: string
                  example: '****'
                region:
                  type: string
                  example: 'us-east-2'
                endpoint:
                  type: string
                  example: 'localhost:9021'
                ssl:
                  type: boolean
                path_style:
                  type: boolean
                buckets:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad request
          content: {}

  /v1/profile/{profileID}/bucket:
    get:
      tags:
      - bucket
      summary: Get all buckets for a profile
      operationId: v1GetProfileBuckets
      parameters:
      - name: profileID
        in: path
        description: ID of profile
        required: true
        example: 10
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProfileBucketsJSONResponseBody'
        400:
          description: Bad request
          content: {}
    post:
      tags:
      - bucket
      summary: Add a bucket for a profile
      operationId: v1AddProfileBucket
      parameters:
      - name: profileID
        in: path
        description: ID of profile
        required: true
        example: 10
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              properties:
                name:
                  type: string
                  example: 'test-bucket-1'
        required: true
      responses:
        201:
          description: OK
          content: {}
        400:
          description: Bad request
          content: {}

  /v1/profile/{profileID}/bucket/{bucketName}/stats:
    get:
      tags:
      - object
      summary: Get stats for bucket for a profile
      operationId: v1GetProfileBucketStats
      parameters:
      - name: profileID
        in: path
        description: ID of profile
        required: true
        example: 10
        schema:
          type: integer
      - name: bucketName
        in: path
        description: Name of bucket
        required: true
        example: 'test-bucket'
        schema:
          type: string
      - name: force
        in: query
        description: Force loading of total stats
        required: false
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProfileBucketStatsJSONResponseBody'
        400:
          description: Bad request
          content: {}

  /v1/profile/{profileID}/bucket/{bucketName}/object:
    get:
      tags:
      - object
      summary: Get all objects in a bucket for a profile
      operationId: v1GetProfileBucketObjects
      parameters:
      - name: profileID
        in: path
        description: ID of profile
        required: true
        example: 10
        schema:
          type: integer
      - name: bucketName
        in: path
        description: Name of bucket
        required: true
        example: 'test-bucket'
        schema:
          type: string
      - name: size
        in: query
        description: Size of result set
        required: false
        schema:
          type: integer
          default: 100
      - name: bucketName
        in: query
        description: Name of bucket
        required: true
        example: 'test-bucket'
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProfileBucketObjectsJSONResponseBody'
        400:
          description: Bad request
          content: {}

components:
  schemas:
    ProfileV1:
      type: object
      required:
      - 'id'
      - 'name'
      - 'access_key'
      - 'secret_key'
      - 'region'
      - 'endpoint'
      - 'ssl'
      - 'path_style'
      - 'buckets'
      properties:
        id:
          type: integer
          format: int64
          description: ID of profile
        name:
          type: string
          description: Name of profile
          example: 'Testprofile 1'
        access_key:
          type: string
          example: '****'
        secret_key:
          type: string
          example: '****'
        region:
          type: string
          example: 'us-east-2'
        endpoint:
          type: string
          example: 'localhost:9021'
        ssl:
          type: boolean
        path_style:
          type: boolean
        buckets:
          type: array
          items:
            type: string

    BucketV1:
      type: object
      required:
      - 'name'
      properties:
        name:
          type: string
          description: Name of bucket
          example: 'test-bucket'

    BucketStatsV1:
      type: object
      required:
      - 'files'
      - 'size'
      - 'complete'
      properties:
        files:
          type: integer
          format: int64
          description: Number of files in bucket
          example: 2478
        size:
          type: integer
          format: int64
          description: Total size of files in bucket (bytes)
          example: 639468924
        complete:
          type: boolean
          description: Loading the stats was successfully completed
          example: true

    ObjectV1:
      type: object
      required:
      - 'key'
      - 'last_modified'
      - 'owner_name'
      - 'owner_id'
      - 'size'
      properties:
        key:
          type: string
          description: Key of object
          example: 'test-object.csv'
        last_modified:
          type: string
          format: date-time
          description: Timestamp of last modification
        owner_name:
          type: string
          description: Name of Owner of object
        owner_id:
          type: string
          description: ID of Owner of object
        size:
          type: integer
          format: int64
          description: Size of object

    v1GetProfilesJSONResponseBody:
      type: object
      required:
      - 'profiles'
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/ProfileV1'
    
    v1AddProfileJSONResponseBody:
      type: object
      required:
      - 'profile_id'
      properties:
        profile_id:
          type: integer
          format: int64
          description: ID of new profile

    v1GetProfileBucketsJSONResponseBody:
      type: object
      required:
      - 'buckets'
      properties:
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/BucketV1'
   
    v1GetProfileBucketStatsJSONResponseBody:
      type: object
      required:
      - 'stats'
      properties:
        stats:
          $ref: '#/components/schemas/BucketStatsV1'

    v1GetProfileBucketObjectsJSONResponseBody:
      type: object
      required:
      - 'objects'
      - 'continuation_token'
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectV1'
        continuation_token:
          type: string
